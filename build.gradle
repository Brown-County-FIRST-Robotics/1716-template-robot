
plugins {
    id "java"
    id "edu.wpi.first.GradleRIO" version "2025.3.1"
    id "idea"
    id 'com.diffplug.spotless' version '6.12.0'
}

def javaVersion = JavaVersion.VERSION_17

java {
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
}
build.dependsOn(spotlessApply);

def ROBOT_MAIN_CLASS = "frc.robot.Main"

// Define my targets (RoboRIO) and artifacts (deployable files)
// This is added by GradleRIO's backing project DeployUtils.
deploy {
    targets {
        roborio(getTargetTypeClass('RoboRIO')) {
            // Team number is loaded either from the .wpilib/wpilib_preferences.json
            // or from command line. If not found an exception will be thrown.
            // You can use getTeamOrDefault(team) instead of getTeamNumber if you
            // want to store a team number in this file.
            team = project.frc.getTeamNumber()
            debug = project.frc.getDebugOrDefault(false)

            artifacts {
                // First part is artifact name, 2nd is artifact type
                // getTargetTypeClass is a shortcut to get the class type using a string

                frcJava(getArtifactTypeClass('FRCJavaArtifact')) {
                }

                // Static files artifact
                frcStaticFileDeploy(getArtifactTypeClass('FileTreeArtifact')) {
                    files = project.fileTree('src/main/deploy')
                    directory = '/home/lvuser/deploy'
                    deleteOldFiles = false // Change to true to delete files on roboRIO that no
                    // longer exist in deploy directory of this project
                }
            }
        }
    }
}
repositories {
    maven {
        url = uri("https://maven.pkg.github.com/Mechanical-Advantage/AdvantageKit")
        credentials {
            username = "Mechanical-Advantage-Bot"
            password = "\u0067\u0068\u0070\u005f\u006e\u0056\u0051\u006a\u0055\u004f\u004c\u0061\u0079\u0066\u006e\u0078\u006e\u0037\u0051\u0049\u0054\u0042\u0032\u004c\u004a\u006d\u0055\u0070\u0073\u0031\u006d\u0037\u004c\u005a\u0030\u0076\u0062\u0070\u0063\u0051"
        }
    }
    mavenLocal()
}


def deployArtifact = deploy.targets.roborio.artifacts.frcJava

// Set to true to use debug for JNI.
wpi.java.debugJni = false

// Set this to true to enable desktop support.
//noinspection GroovyUnusedAssignment
def includeDesktopSupport = true

dependencies {
    annotationProcessor wpi.java.deps.wpilibAnnotations()
    implementation wpi.java.deps.wpilib()
    implementation wpi.java.vendor.java()

    roborioDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.roborio)
    roborioDebug wpi.java.vendor.jniDebug(wpi.platforms.roborio)

    roborioRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.roborio)
    roborioRelease wpi.java.vendor.jniRelease(wpi.platforms.roborio)

    nativeDebug wpi.java.deps.wpilibJniDebug(wpi.platforms.desktop)
    nativeDebug wpi.java.vendor.jniDebug(wpi.platforms.desktop)
    simulationDebug wpi.sim.enableDebug()

    nativeRelease wpi.java.deps.wpilibJniRelease(wpi.platforms.desktop)
    nativeRelease wpi.java.vendor.jniRelease(wpi.platforms.desktop)
    simulationRelease wpi.sim.enableRelease()


    testImplementation platform("org.junit:junit-bom:5.11.4")
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "org.junit.jupiter:junit-jupiter-params"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

    def akitJson = new groovy.json.JsonSlurper().parseText(new File(projectDir.getAbsolutePath() + "/vendordeps/AdvantageKit.json").text)
    annotationProcessor "org.littletonrobotics.akit:akit-autolog:$akitJson.version"

}

test{
    useJUnitPlatform()
    systemProperty 'junit.jupiter.extensions.autodetection.enabled', 'true'
}

// Simulation configuration (e.g. environment variables).
wpi.sim.addGui().defaultEnabled=true // disable for replay
wpi.sim.addDriverstation()


// Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
// in order to make them all available at runtime. Also adding the manifest so WPILib
// knows where to look for our Robot Class.
jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    from sourceSets.main.allSource
    manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// Configure jar and deploy tasks
deployArtifact.jarTask = jar
wpi.java.configureExecutableTasks(jar)
wpi.java.configureTestTasks(test)

tasks.withType(JavaCompile) {
    // Configure string concat to always inline compile
    options.compilerArgs.add '-XDstringConcat=inline'
}

// Check selected robot when deploying
tasks.register('checkRobot', JavaExec) {
    dependsOn "classes"
    mainClass = "frc.robot.WhoAmI"
    classpath = sourceSets.main.runtimeClasspath
    args("real")
}
deployroborio.dependsOn(checkRobot)
tasks.register('checkSim',JavaExec) {
    dependsOn(classes)
    mainClass = "frc.robot.WhoAmI"
    classpath = sourceSets.main.runtimeClasspath
    args("sim")
}
//simulateJava.dependsOn(checkSim);


def writeGitData =tasks.create("writeGitData") {
    doLast(){
        def userstdout = new ByteArrayOutputStream()
        def rawtime= new Date()
        def month=(rawtime.toCalendar().get(Calendar.MONTH)+1).toString()
        def day=rawtime.toCalendar().get(Calendar.DAY_OF_MONTH).toString()
        def hour=rawtime.toCalendar().get(Calendar.HOUR_OF_DAY).toString()
        def minute=rawtime.toCalendar().get(Calendar.MINUTE).toString()
        def second=rawtime.toCalendar().get(Calendar.SECOND).toString()
        def dateString=rawtime.toCalendar().get(Calendar.YEAR).toString()+(month.length()==2?month:("0"+month))+(day.length()==2?day:("0"+day))+"_"+(hour.length()==2?hour:("0"+hour))+(minute.length()==2?minute:("0"+minute))+(second.length()==2?second:("0"+second)) // Uses YYYYMMDD_HHmmss, or ISO 860

        // This is the best cross-platform way to get username
        exec {
            commandLine "git", "config", "--get", "user.name"
            standardOutput = userstdout // Captures output instead of using stdout
        }
        // "zzzz_" is added to fall to the bottom of any sorted list
        def tagname="zzzz_"+userstdout.toString().trim()+"_"+dateString+"_deploy"

        // Create two commits, one with the staged changes, and the other with the unstaged changes
        // This way, we can revert them in a specific way to preserve staged vs unstaged changes
        exec {
            commandLine "git", "commit", "--allow-empty", "--no-gpg-sign", "-m", "Staged changes during deploy at "+dateString
        }
        exec {
            commandLine "git", "add", "."
        }
        exec {
            commandLine "git", "commit", "--allow-empty", "--no-gpg-sign", "-m", "Unstaged changes during deploy at "+dateString
        }
        exec {
            commandLine "git", "tag", "--no-sign", tagname
        }
        exec {
            // This will move the head back one commit, keeping the changes as staged changes
            // This does not delete the commit, as we have already attached a tag to it
            commandLine "git", "reset", "--soft", "HEAD^1"
        }
        exec {
            // Since the second commit was the unstaged changes, and `git reset` stages the changes, we need to unstage them
            commandLine "git", "restore", "--staged", "."
        }
        exec {
            // Lastly, bring back the staged changes
            commandLine "git", "reset", "--soft", "HEAD^1"
        }
        // This will make two files, one for the git tag name and one for the deployer's name
        new File(
                projectDir.toString() + "/src/main/deploy",
                "git_tag.txt"
                ).text = tagname
        new File(
                projectDir.toString() + "/src/main/deploy",
                "deployer.txt"
                ).text = userstdout.toString().trim()
    }}
writeGitData.dependsOn(spotlessApply);

deploy.targets.roborio.artifacts.frcStaticFileDeploy.dependsOn(writeGitData)



idea {
    project {
        // The project.sourceCompatibility setting is not always picked up, so we set explicitly
        languageLevel = javaVersion
    }
    module {
        // Improve development & (especially) debugging experience (and IDEA's capabilities) by having libraries' source & javadoc attached
        downloadJavadoc = true
        downloadSources = true
        // Exclude the following from indexing and search
        excludeDirs+=file(".run" )
        excludeDirs+=file(".vscode" )
    }
}


spotless {
    java {
        target fileTree('.') {
            include '**/*.java'
            exclude '**/build/**', '**/build-*/**'
        }
        toggleOffOn()
        googleJavaFormat()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()
    }
    groovyGradle {
        target fileTree('.') {
            include '**/*.gradle'
            exclude '**/build/**', '**/build-*/**'
        }
        greclipse()
        indentWithSpaces(4)
        trimTrailingWhitespace()
        endWithNewline()
    }
    format 'xml', {
        target fileTree('.') {
            include '**/*.xml'
            exclude '**/build/**', '**/build-*/**', '.idea/**'
        }
        eclipseWtp('xml')
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
    format 'misc', {
        target fileTree('.') {
            include '**/.gitignore'
            exclude '**/build/**', '**/build-*/**'
        }
        trimTrailingWhitespace()
        indentWithSpaces(2)
        endWithNewline()
    }
}
