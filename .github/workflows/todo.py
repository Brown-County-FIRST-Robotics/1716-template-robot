import github
import argparse
import git
import re
import os

def markdown_link(text, url):
    return f"<a href='{url}'>{text}</a>"
def markdown_dropdown(short,long):
    return "<details><summary>"+short+"\n\n</summary>\n"+long+"\n</details>"
def markdown_codeblock(code):
    return f"```java\n{code.strip("\n")}\n```"

def getInfoAbtLine(fileName, lineNumber):
    blame=None
    try:
        print(fileName)
        blame=git.Repo(".").blame("HEAD", fileName)
    except:
        blame=[]
        print("ALFIAL")


    counter=1
    for commit,lines in blame:
        if counter+len(lines)>lineNumber:
            return f"({commit.author.name} {markdown_link(commit.hexsha[:7],f'{get_repo_url(git.Repo('.'))}/commit/'+commit.hexsha)})"
        counter+=len(lines)
    return "failed"

def getContextForLine(fileName, lineNumber):
    with open(fileName, 'r') as file:
        content=file.readlines()
        return markdown_codeblock("\n".join(content[max(0,lineNumber-2):min(len(content),lineNumber+2)]))

def getLinkForLine(text,fileName, lineNumber):
    return markdown_link(text, f"{get_repo_url(git.Repo('.'))}/blob/{git.Repo(".").active_branch.name}/{fileName}/#L{lineNumber}")

def getTODOS():
    pattern = re.compile('TO' + 'DO:', re.IGNORECASE)
    # Iterate over the files in the current directory and its subdirectories
    res={}
    for dirpath, dirnames, filenames in os.walk('.'):
        # Exclude the .git directory
        if '.git' in dirnames:
            dirnames.remove('.git')
        if 'venv' in dirnames:
            dirnames.remove('venv')
        for filename in filenames:
            # Skip files with non-textual extensions
            if not filename.endswith('.md') and not filename.endswith('.py') and not filename.endswith('.cpp') and not filename.endswith('.h') and not filename.endswith('.java') and not filename.endswith('.gradle'):
                continue
            filepath = os.path.join(dirpath, filename)
            with open(filepath, 'r') as file:
                for line_number, line in enumerate(file, 1):
                    if pattern.search(line):
                        if not res.get(filepath):
                            res[filepath]=[]
                        res[filepath].append([line_number, "`"+line.strip("\n").strip(" ")+"`"])
    return res


def genMarkdown(todos):
    res=""
    for fname,file_todos in todos.items():
        res+=f"## {fname}\n"
        for line_num, todo_message in file_todos: # getLinkForLine(fname,line_num)
            res+="- [ ] "+getLinkForLine(f"Line {line_num}:",fname,line_num)+f" {todo_message.strip(" ")} "+ getInfoAbtLine(fname,line_num)+"\n"
        res+="\n"
    return res

def get_repo_name(rep:git.Repo):
    return get_repo_url(rep).split("github.com/")[1]


def get_repo_url(rep):
    return list(rep.remotes[0].urls)[0]


parser= argparse.ArgumentParser()

parser.add_argument('--token', action="store", dest="token")

args=parser.parse_args()
ghInst=github.Github(args.token)
rep=git.Repo(".")
gh_repo=ghInst.get_repo(get_repo_name(rep))
issues = gh_repo.get_issues(state='all', labels=["AutoGenerated"])
issue_name=f'TODOs:{rep.active_branch.name}'
branches=[r.name.strip("origin/") for r in rep.remote().refs]
for issue in issues:
    if issue.title == issue_name:
        issue_number = issue.number
    if issue.title.strip("TODOs:") not in branches:
        issue.edit(state="closed")
else:
    print("Issue not found, creating one")
    issue=gh_repo.create_issue(title=issue_name, body='')
    issue_number=issue.number
gh_repo.get_issue(issue_number).add_to_labels("AutoGenerated")
markdown=genMarkdown(getTODOS())

print(markdown)
if markdown!="":
    gh_repo.get_issue(issue_number).edit(body=markdown, state="open")
else:
    gh_repo.get_issue(issue_number).edit(state="closed")
